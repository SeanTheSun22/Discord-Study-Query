/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'

    // Use JDBC for SQL Server
    implementation 'com.microsoft.sqlserver:mssql-jdbc:12.4.1.jre11'

    // Use Jackson for JSON
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'

    // Use JDA for Discord
    implementation 'net.dv8tion:JDA:5.0.0-beta.13'
}

application {
    // Define the main class for the application.
    mainClass = 'discordstudyquery.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task cdRun {
    doLast {
        def gitPullResult = new ProcessBuilder("bash", "-c", "git pull").redirectErrorStream(true).start()
        gitPullResult.waitFor()

        if (gitPullResult.exitValue() != 0) {
            throw new GradleException("Git pull failed with exit code ${gitPullResult.exitValue()}")
        }

        def gradleRunResult = new ProcessBuilder("bash", "-c", "gradle run").redirectErrorStream(true).start()
        gradleRunResult.waitFor()

        if (gradleRunResult.exitValue() == 1) {
            new ProcessBuilder("bash", "-c", "gradle cdRun").redirectErrorStream(true).start()
        }
    }
}